using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using AutoMapper;
using AutoMapper.QueryableExtensions;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Nesteo.Server.Data.Entities;

namespace Nesteo.Server.Services.Implementations
{
    public abstract class CrudServiceBase<TEntity, TModel, TKey> : ICrudService<TModel, TKey> where TEntity : class, IEntity<TKey> where TModel : class
    {
        protected DbContext DbContext { get; }

        protected IMapper Mapper { get; }

        protected DbSet<TEntity> Entities { get; }

        protected CrudServiceBase(DbContext dbContext, IMapper mapper)
        {
            DbContext = dbContext ?? throw new ArgumentNullException(nameof(dbContext));
            Mapper = mapper ?? throw new ArgumentNullException(nameof(mapper));
            Entities = dbContext.Set<TEntity>();
        }

        public IAsyncEnumerable<TModel> GetAllAsync()
        {
            // Map all entries to the model type and retrieve them as async stream
            return Entities.ProjectTo<TModel>(Mapper.ConfigurationProvider).AsAsyncEnumerable();
        }

        public Task<TModel> FindByIdAsync(TKey id, CancellationToken cancellationToken = default)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            // Search for the entry with the given ID and map it to the model type
            return Entities.Where(entity => entity.Id.Equals(id)).ProjectTo<TModel>(Mapper.ConfigurationProvider).FirstOrDefaultAsync(cancellationToken);
        }

        public async Task<TModel> InsertOrUpdateAsync(TModel entry, CancellationToken cancellationToken = default)
        {
            if (entry == null)
                throw new ArgumentNullException(nameof(entry));

            // Convert model to entity
            TEntity entity = Mapper.Map<TEntity>(entry);

            // Insert or update the entry. This will update our entity and e.g. set the auto-generated key.
            await InsertOrUpdateAsync(entity, cancellationToken).ConfigureAwait(false);

            // Map the updated entity and return it back
            return Mapper.Map<TModel>(entity);
        }

        public async Task DeleteAsync(TKey id, CancellationToken cancellationToken = default)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            // Query entity that should be deleted
            TEntity entity = await Entities.FindAsync(new { id }, cancellationToken).ConfigureAwait(false);

            // Delete entity
            Entities.Remove(entity);
            await DbContext.SaveChangesAsync(cancellationToken).ConfigureAwait(false);
        }

        protected async Task InsertOrUpdateAsync(TEntity entity, CancellationToken cancellationToken = default)
        {
            if (entity == null)
                throw new ArgumentNullException(nameof(entity));

            // Will the key get auto-generated by the database?
            bool keyGetsAutoGenerated = DbContext.Entry(entity).Property(e => e.Id).Metadata.ValueGenerated != ValueGenerated.Never;

            if (keyGetsAutoGenerated)
            {
                // Just do an update, the framework will detect if the key is set and will do an insert if necessary.
                Entities.Update(entity);
            }
            else
            {
                // We expect the ID to have been set in advance
                if (entity.Id == null)
                    throw new InvalidOperationException("Non auto-generated entry IDs need to be set manually and must not be null.");

                // The database won't generate any keys, so we can decide whether to do an insert or an update based on if the entry already exists in the database.
                TEntity existingEntity = await Entities.FindAsync(new { entity.Id }, cancellationToken).ConfigureAwait(false);

                // Insert or update based on if the entity has been found
                if (existingEntity == null)
                    Entities.Add(entity);
                else
                    Entities.Update(entity);
            }

            // Save all changes
            await DbContext.SaveChangesAsync(cancellationToken).ConfigureAwait(false);
        }
    }
}
