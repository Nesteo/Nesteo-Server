// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Nesteo.Server.Data;

namespace Nesteo.Server.Migrations
{
    [DbContext(typeof(NesteoDbContext))]
    [Migration("20190920015448_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Nesteo.Server.Data.Entities.InspectionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AgeInDays");

                    b.Property<int>("ChickCount");

                    b.Property<string>("Comment");

                    b.Property<int>("Condition");

                    b.Property<bool>("ContainsEggs");

                    b.Property<int?>("EggCount");

                    b.Property<int>("FemaleParentBirdDiscovery");

                    b.Property<bool>("HasBeenCleaned");

                    b.Property<string>("ImageFileName")
                        .HasMaxLength(100);

                    b.Property<string>("InspectedByUserId")
                        .IsRequired();

                    b.Property<DateTime>("InspectionDate");

                    b.Property<bool>("JustRepaired");

                    b.Property<DateTime>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("MaleParentBirdDiscovery");

                    b.Property<string>("NestingBoxId")
                        .IsRequired();

                    b.Property<bool>("Occupied");

                    b.Property<int>("RingedChickCount");

                    b.Property<int?>("SpeciesId");

                    b.HasKey("Id");

                    b.HasIndex("InspectedByUserId");

                    b.HasIndex("NestingBoxId");

                    b.HasIndex("SpeciesId");

                    b.ToTable("Inspections");
                });

            modelBuilder.Entity("Nesteo.Server.Data.Entities.NestingBoxEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(6);

                    b.Property<string>("Comment");

                    b.Property<double?>("CoordinateLatitude");

                    b.Property<double?>("CoordinateLongitude");

                    b.Property<string>("ForeignId")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime?>("HangUpDate");

                    b.Property<string>("HangUpUserId");

                    b.Property<int>("HoleSize");

                    b.Property<string>("ImageFileName")
                        .HasMaxLength(100);

                    b.Property<DateTime>("LastUpdated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("Material");

                    b.Property<string>("OldId")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("OwnerId");

                    b.Property<int>("RegionId");

                    b.HasKey("Id");

                    b.HasIndex("HangUpUserId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("RegionId");

                    b.ToTable("NestingBoxes");
                });

            modelBuilder.Entity("Nesteo.Server.Data.Entities.OwnerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("Owners");
                });

            modelBuilder.Entity("Nesteo.Server.Data.Entities.RegionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("NestingBoxIdPrefix")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("Nesteo.Server.Data.Entities.ReservedIdSpaceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FirstNestingBoxIdWithoutPrefix");

                    b.Property<int>("LastNestingBoxIdWithoutPrefix");

                    b.Property<string>("OwnerId")
                        .IsRequired();

                    b.Property<int>("RegionId");

                    b.Property<DateTime>("ReservationDate");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("RegionId");

                    b.ToTable("ReservedIdSpaces");
                });

            modelBuilder.Entity("Nesteo.Server.Data.Entities.SpeciesEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("Species");
                });

            modelBuilder.Entity("Nesteo.Server.Data.Identity.NesteoRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Nesteo.Server.Data.Identity.NesteoUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Nesteo.Server.Data.Identity.NesteoRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Nesteo.Server.Data.Identity.NesteoUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Nesteo.Server.Data.Identity.NesteoUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Nesteo.Server.Data.Identity.NesteoRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nesteo.Server.Data.Identity.NesteoUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Nesteo.Server.Data.Identity.NesteoUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nesteo.Server.Data.Entities.InspectionEntity", b =>
                {
                    b.HasOne("Nesteo.Server.Data.Identity.NesteoUser", "InspectedByUser")
                        .WithMany()
                        .HasForeignKey("InspectedByUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nesteo.Server.Data.Entities.NestingBoxEntity", "NestingBox")
                        .WithMany()
                        .HasForeignKey("NestingBoxId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nesteo.Server.Data.Entities.SpeciesEntity", "Species")
                        .WithMany("Inspections")
                        .HasForeignKey("SpeciesId");
                });

            modelBuilder.Entity("Nesteo.Server.Data.Entities.NestingBoxEntity", b =>
                {
                    b.HasOne("Nesteo.Server.Data.Identity.NesteoUser", "HangUpUser")
                        .WithMany()
                        .HasForeignKey("HangUpUserId");

                    b.HasOne("Nesteo.Server.Data.Entities.OwnerEntity", "Owner")
                        .WithMany("NestingBoxes")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nesteo.Server.Data.Entities.RegionEntity", "Region")
                        .WithMany("NestingBoxes")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nesteo.Server.Data.Entities.ReservedIdSpaceEntity", b =>
                {
                    b.HasOne("Nesteo.Server.Data.Identity.NesteoUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nesteo.Server.Data.Entities.RegionEntity", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
